commit 69420e1bd56ad7348ebd1eb03597bf15b23175ac
Author: Isuru Fernando <isuruf@gmail.com>
Date:   Thu Apr 4 00:39:05 2019 -0500

    Use LLD libraries

diff --git a/cmake/LLVM.cmake b/cmake/LLVM.cmake
index 926b9776..21c3d78a 100644
--- a/cmake/LLVM.cmake
+++ b/cmake/LLVM.cmake
@@ -268,6 +268,16 @@ run_llvm_config(LLVM_SYSLIBS --system-libs ${LLVM_LIB_MODE})
 string(STRIP "${LLVM_SYSLIBS}" LLVM_SYSLIBS)
 
 ####################################################################
+if (ENABLE_LLD)
+  set(LLD_LIBNAMES lldELF lldConfig lldCore ${LLD_LIBNAMES})
+  foreach(LIBNAME ${LLD_LIBNAMES})
+    find_library(C_LIBFILE_${LIBNAME} NAMES "${LIBNAME}" HINTS "${LLVM_LIBDIR}")
+    list(APPEND LLD_LIBFILES "${C_LIBFILE_${LIBNAME}}")
+    if(UNIX AND (NOT APPLE))
+      set(LLVM_LDFLAGS "${LLVM_LDFLAGS} -Wl,--exclude-libs,lib${LIBNAME}")
+    endif()
+  endforeach()
+endif()
 
 # llvm-config does not include clang libs
 if((9 LESS LLVM_MAJOR) AND (NOT STATIC_LLVM))
diff --git a/config.h.in.cmake b/config.h.in.cmake
index c867dc5b..7fb59c53 100644
--- a/config.h.in.cmake
+++ b/config.h.in.cmake
@@ -90,6 +90,8 @@
 
 #cmakedefine ENABLE_LOADABLE_DRIVERS
 
+#cmakedefine ENABLE_LLD
+
 /* this is used all over the runtime code */
 #define HOST_CPU_CACHELINE_SIZE @HOST_CPU_CACHELINE_SIZE@
 
diff --git a/lib/CL/CMakeLists.txt b/lib/CL/CMakeLists.txt
index 342cdac4..7bfc0776 100644
--- a/lib/CL/CMakeLists.txt
+++ b/lib/CL/CMakeLists.txt
@@ -230,7 +230,7 @@ if(POCL_DEVICES_LINK_LIST)
 endif()
 
 if(ENABLE_LLVM)
-   list(APPEND POCL_PRIVATE_LINK_LIST ${CLANG_LIBFILES} ${POCL_LLVM_LIBS} ${LLVM_SYSLIBS})
+   list(APPEND POCL_PRIVATE_LINK_LIST ${LLD_LIBFILES} ${CLANG_LIBFILES} ${POCL_LLVM_LIBS} ${LLVM_SYSLIBS})
 endif()
 
 if(HAVE_LTTNG_UST)
diff --git a/lib/CL/devices/common.c b/lib/CL/devices/common.c
index 47fe0855..1113175e 100644
--- a/lib/CL/devices/common.c
+++ b/lib/CL/devices/common.c
@@ -214,13 +214,28 @@ llvm_codegen (char *output, unsigned device_i, cl_kernel kernel,
 
   /* Link through Clang driver interface who knows the correct toolchains
      for all of its targets.  */
-  const char *cmd_line[64] =
-    {CLANG, "-o", tmp_module, tmp_objfile};
+  const char *cmd_line[64] = {
+#if defined(ENABLE_LLD)
+#if defined(__APPLE__)
+         "/bin/ld.64",
+#elif defined(_WIN32)
+         "lld-link.exe",
+#else
+         "/bin/ld.lld",
+#endif
+#else
+         CLANG,
+#endif
+          "-o", tmp_module, tmp_objfile};
   const char **device_ld_arg = device->final_linkage_flags;
   const char **pos = &cmd_line[4];
   while ((*pos++ = *device_ld_arg++)) {}
 
+#ifdef ENABLE_LLD
+  error = pocl_invoke_lld (device, cmd_line);
+#else
   error = pocl_invoke_clang (device, cmd_line);
+#endif
 
   if (error)
     {
diff --git a/lib/CL/pocl_llvm.h b/lib/CL/pocl_llvm.h
index bf32ab27..e7df598a 100644
--- a/lib/CL/pocl_llvm.h
+++ b/lib/CL/pocl_llvm.h
@@ -122,6 +122,7 @@ extern "C" {
                               void **cur_llvm_irs, int link_program, int spir);
 
   int pocl_invoke_clang (cl_device_id Device, const char **Args);
+  int pocl_invoke_lld (cl_device_id Device, const char **Args);
 
 #ifdef __cplusplus
 }
diff --git a/lib/CL/pocl_llvm_build.cc b/lib/CL/pocl_llvm_build.cc
index 5587e3fd..ec0f936c 100644
--- a/lib/CL/pocl_llvm_build.cc
+++ b/lib/CL/pocl_llvm_build.cc
@@ -65,6 +65,10 @@ IGNORE_COMPILER_WARNING("-Wstrict-aliasing")
 
 #endif
 
+#ifdef ENABLE_LLD
+#include <lld/Common/Driver.h>
+#endif
+
 #include <iostream>
 #include <sstream>
 #include <regex>
@@ -1054,3 +1058,34 @@ int pocl_invoke_clang(cl_device_id Device, const char** Args) {
   }
 
 }
+
+#ifdef ENABLE_LLD
+/**
+ * Invoke the ld.lld compiler through its Driver API.
+ *
+ * @param Args the command line arguments that would be passed to lld
+ *             (a NULL terminated list). Args[0] should be the path to
+ *             the Clang binary.
+ * @return 0 on success, error code otherwise.
+ */
+int pocl_invoke_lld(char* const* Args) {
+  char * const*ArgsEnd = Args;
+  while (*ArgsEnd++ != nullptr) {}
+
+  llvm::ArrayRef<const char*> ArgsArray(Args, ArgsEnd);
+
+  bool success = false;
+#if defined(__APPLE__)
+  success = lld::mach_o::link(ArgsArray, false);
+#elif defined(__linux__)
+  success = lld::elf::link(ArgsArray, false);
+#elif defined(_WIN32)
+  success = lld::coff::link(ArgsArray, false);
+#endif
+  if (!success) {
+     return -1;
+  } else {
+     return 0;
+  }
+}
+#endif
